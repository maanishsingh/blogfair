"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const http = require("http");
const https = require("https");
const isUtf8Representable = function (buffer) {
    const utfEncodedBuffer = buffer.toString('utf8');
    const reconstructedBuffer = Buffer.from(utfEncodedBuffer, 'utf8');
    return reconstructedBuffer.equals(buffer);
};
const getRequestHandler = (allowedHosts, supportedResourceTypes = ['xhr', 'fetch', 'document']) => (interceptedRequest) => {
    const url = interceptedRequest.url();
    if (!supportedResourceTypes.includes(interceptedRequest.resourceType()) ||
        !allowedHosts.find((allowedHost) => url.includes(allowedHost))) {
        return interceptedRequest.continue();
    }
    new Promise((resolve, reject) => {
        let protocol = http;
        if (url.includes('https://')) {
            protocol = https;
        }
        const req = protocol.request(url, {
            method: interceptedRequest.method().toLowerCase(),
            headers: interceptedRequest.headers(),
        });
        req.on('error', (e) => {
            return reject(e);
        });
        req.on('response', (response) => {
            const chunks = [];
            response.on('data', (chunk) => {
                chunks.push(chunk);
            });
            response.on('end', () => {
                var mergedBuffer = Buffer.concat(chunks);
                var isBinary = !isUtf8Representable(mergedBuffer);
                var data = null;
                if (!isBinary) {
                    data = mergedBuffer.toString('utf8');
                }
                else {
                    data = mergedBuffer;
                }
                const resolveValue = {
                    body: data,
                    status: response.statusCode,
                    headers: response.headers,
                };
                resolve(resolveValue);
            });
        });
        const postData = interceptedRequest.postData();
        if (postData) {
            req.write(postData);
        }
        req.end();
    })
        .then((value) => {
        return interceptedRequest.respond(value);
    })
        .catch((e) => {
        // console.log('Error got', e);
        interceptedRequest.abort();
        throw e;
    });
};
module.exports = (page, allowedHosts, supportedResourceTypes) => __awaiter(void 0, void 0, void 0, function* () {
    yield page.setRequestInterception(true);
    page.on('request', getRequestHandler(allowedHosts, supportedResourceTypes));
});
